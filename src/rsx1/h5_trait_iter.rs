//  •═══════··══════════════════·═══════════════════··══════════════════·═══════════════════··══════════════════·═══════════════════··══════════════════•
//  ✨λ p5_trait_iter.rs


#![allow(dead_code)]

//  •═══════··══════════════════·═══════════════════··══════════════════·═══════════════════··══════════════════·═══════════════════··══════════════════•
//λ unit tests
#[cfg(test)]
mod parse_test {
    // use chrono::{};

    #[test]
    fn test_fail() {

        let ok: bool = false;
        assert!(ok);
    }


}


//  •═══════··══════════════════·═══════════════════··══════════════════·═══════════════════··══════════════════·═══════════════════··══════════════════•
// Constants § Types

const C_LL: &str = "\n•═══════════··══════════════════·═══════════════════··═══════════•\n";


//  •═══════··══════════════════·═══════════════════··══════════════════·═══════════════════··══════════════════·═══════════════════··══════════════════•
//λ functions


//  •═══════··══════════════════·═══════════════════··══════════════════·═══════════════════··══════════════════·═══════════════════··═══════════•
//λ check_mod
pub fn check_mod() -> Result<(), Box<dyn Error>> {
    print!("{}🎡ꮗ Checking: p5_trait_iter.rs \n\n", C_LL);

    Ok(())
    // panic!("for: No Reason");
    
}


//λ The Code Pit
/*

•═══════════··══════════════════·═══════════════════··══════════════════·═══════════════════··═══════════•

*/
// End Of The Code Pit


//λ h5_trait_iter.rs
// ✨λ h5_trait_iter.rs
